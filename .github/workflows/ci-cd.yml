name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Permissões globais otimizadas
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write  # Para análises de segurança
    
env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    # Permissões específicas do job
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    # CORRIGIDO: Atualizado para v4
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests
      run: mvn clean test
    
    # CORRIGIDO: Atualizado para versão mais recente e estável
    - name: Generate test report
      uses: dorny/test-reporter@v1.9.1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false  # Não falha o pipeline se houver problemas no report

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    # CORRIGIDO: Atualizado para v4
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Compile for analysis
      run: mvn clean compile -DskipTests
    
    # Análise básica de dependências (substitui SonarQube temporariamente)
    - name: Generate dependency report
      run: |
        mvn dependency:tree > dependency-report.txt
        mvn dependency:analyze >> dependency-report.txt
      continue-on-error: true
    
    # CORRIGIDO: Atualizado para v4
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis
        path: dependency-report.txt
        retention-days: 30

  # REMOVIDO: Job de segurança problemático comentado
  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Run basic security check
  #     run: mvn dependency:check -DfailBuild=false
  #     continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    # CORRIGIDO: Atualizado para v4
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build application
      run: mvn clean package -DskipTests

    # REMOVIDO: Dependency submission que causava problemas de permissão
    # Substituído por análise local de dependências
    - name: Generate build info
      run: |
        echo "Build completed at $(date)" > build-info.txt
        echo "Commit SHA: ${{ github.sha }}" >> build-info.txt
        mvn dependency:list >> build-info.txt
      continue-on-error: true
    
    # OPCIONAL: Build Docker apenas se Dockerfile existir
    - name: Check for Dockerfile
      id: docker-check
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Docker image
      if: steps.docker-check.outputs.dockerfile-exists == 'true'
      run: |
        docker build -t med-voll-api:${{ github.sha }} .
        docker tag med-voll-api:${{ github.sha }} med-voll-api:latest
      continue-on-error: true
    
    # CORRIGIDO: Atualizado para v4
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts-${{ github.sha }}
        path: target/*.jar
        retention-days: 30
    
    # CORRIGIDO: Atualizado para v4
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ github.sha }}
        path: build-info.txt
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    # CORRIGIDO: Atualizado para v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts-${{ github.sha }}
        path: ./artifacts
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "JAR files available:"
        ls -la ./artifacts/
        # Adicionar comandos de deploy específicos aqui

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    # CORRIGIDO: Atualizado para v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts-${{ github.sha }}
        path: ./artifacts
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "JAR files available:"
        ls -la ./artifacts/
        # Adicionar comandos de deploy específicos aqui
